#The NE 2TSF specification with COLS GMM estimation method

smpl --no-missing RegrList Life_Ladder

#XXXXXXXX  Code for GMM NE or NHN XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

#A.COLS/GMM - estimate only the distribution parameters
set max_verbose full
scalar obsn = $nobs
series res =  
matrix W =  I(4)   #4 because we have an extra moment condition

scalar qv = 0.5
scalar qw = 0.5         
scalar qu = 0.7  
 
series eq2 = 0
series eq3 = 0
series eq4 = 0
series eq5 = 0


gmm
series res2 = res^2
series res3 = res^3
series res4 = res^4
series res5 = res^5
scalar Avres2sq = ((1/obsn)*sum(res2))^2
scalar Avres2 = (1/obsn)*sum(res2)
scalar Avres3 = (1/obsn)*sum(res3)    

#/*  #THESE ARE THE NE MOMENT CONDITIONS
series eq2 = (res2 - (sqrt(qv))^4 - (sqrt(qw))^4 - (sqrt(qu))^4  )*(1/obsn)
series eq3 = ( res3 - 2*(qw^3 - qu^3)  )*(1/obsn)
series eq4 = ((res4 - 3*Avres2sq) - 6*((sqrt(qw))^8 +  (sqrt(qu))^8))*(1/obsn)
series eq5 = ((res5-10*Avres2*Avres3) - 24*(qw^5-qu^5))*(1/obsn)
#*/

/*  #THESE ARE THE NHN MOMENT CONDITIONS
series eq2 = res2 - sqrt(qv)^4 - (1-2/$pi)*(sqrt(qw)^4 + sqrt(qu)^4) 
series eq3 = res3 - ((4-$pi)*sqrt(2)/($pi^(3/2)))*(qw^3 - qu^3)  
series eq4 = (res4 - 3*Avres2sq) - (8*($pi-3)/($pi^2))*(qw^4 +  qu^4)
series eq5 = (res5-10*Avres2*Avres3) -(qw^5-qu^5)*(sqrt(2)/($pi^5/2))*(96-40*$pi+3*$pi^2)
#*/


orthog eq2 ; const
orthog eq3 ; const
orthog eq4 ; const
orthog eq5 ; const
weights W
params     qv  qw  qu  # 
end gmm --verbose    --iterate   --vcv   # --lbfgs



#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


#B. FULL GMM - joint estimation

# RegrList  10
#RegrList_repl_FE_nc 19
#RegrList_repl_FE_c 19
 

series depvar = Life_Ladder  #input the dependent variable
list Xlist =  RegrList_repl_FE_nc     
scalar obsn = $nobs 
scalar Xlistnelem = nelem(Xlist)     

smpl --no-missing Xlist depvar

ols depvar Xlist --quiet

matrix bcoef = $coeff
series res = $uhat

matrix W = I(nelem(Xlist)+3+1)  # +3 because we estimate 3 sigmas, and +1 because we have an overidentification moment condition

scalar qv = .4# 
scalar qw = .5#           
scalar qu = .5#       
 

series eqb0 = 0
series eqb1 = 0
series eqb2 = 0
series eqb3 = 0
series eqb4 = 0
series eqb5 = 0
series eqb6 = 0
series eqb7 = 0
series eqb8 = 0
series eqb9 = 0
series eqb10 = 0
series eqb11 = 0
series eqb12 = 0
series eqb13 = 0
series eqb14 = 0
series eqb15 = 0
series eqb16 = 0
series eqb17 = 0
series eqb18 = 0

/*
series eqb19 = 0
series eqb20 = 0
series eqb21 = 0
*/
series eq2 = 0
series eq3 = 0
series eq4 = 0
series eq5 = 0

#This so that the names of the variables appear in the estimation output
string varblnames = varname(Xlist)
string errnames = ",sigmav,sigmaw,sigmau"
string allcoefnames = varblnames ~ errnames
set max_verbose full

gmm
#series resc = depvar - lincomb(Xlist,bcoef) - sqrt(2/$pi)*(qw - qu)  #this is for NHN
series resc = depvar - lincomb(Xlist,bcoef) - (qw - qu)  #this is for NE
series resc2 = resc^2
series resc3 = resc^3
series resc4 = resc^4
series resc5 = resc^5
scalar Avres2sq = ((1/obsn)*sum(resc2))^2
scalar Avres2 = (1/obsn)*sum(resc2)
scalar Avres3 = (1/obsn)*sum(resc3)    
series eqb0 = resc*Xlist[1]
series eqb1 = resc*Xlist[2]
series eqb2 = resc*Xlist[3]
series eqb3 = resc*Xlist[4]
series eqb4 = resc*Xlist[5]
series eqb5 = resc*Xlist[6]
series eqb6 = resc*Xlist[7]
series eqb7 = resc*Xlist[8]
series eqb8 = resc*Xlist[9]
series eqb9 = resc*Xlist[10]
series eqb10 = resc*Xlist[11]
series eqb11 = resc*Xlist[12]
series eqb12 = resc*Xlist[13]
series eqb13 = resc*Xlist[14]
series eqb14 = resc*Xlist[15]
series eqb15 = resc*Xlist[16]
series eqb16 = resc*Xlist[17]
series eqb17 = resc*Xlist[18]
series eqb18 = resc*Xlist[19]

/*
series eqb19 = resc*Xlist[20]
series eqb20 = resc*Xlist[21]

series eqb21 = resc*Xlist[22]
 */


#/*  #THESE ARE THE NE MOMENT CONDITIONS
series eq2 = (resc2 - (sqrt(qv))^4 - (sqrt(qw))^4 - (sqrt(qu))^4  )*(1/obsn)
series eq3 = ( resc3 - 2*(qw^3 - qu^3)  )*(1/obsn)
series eq4 = ((resc4 - 3*Avres2sq) - 6*((sqrt(qw))^8 +  (sqrt(qu))^8))*(1/obsn)
series eq5 = ((resc5-10*Avres2*Avres3) - 24*(qw^5-qu^5))*(1/obsn)
#*/

/*  #THESE ARE THE NHN MOMENT CONDITIONS
series eq2 = resc2 - sqrt(qv)^4 - (1-2/$pi)*(sqrt(qw)^4 + sqrt(qu)^4) 
series eq3 = resc3 - ((4-$pi)*sqrt(2)/($pi^(3/2)))*(qw^3 - qu^3)  
series eq4 = (resc4 - 3*Avres2sq) - (8*($pi-3)/($pi^2))*(qw^4 +  qu^4)
series eq5 = (resc5-10*Avres2*Avres3) -(qw^5-qu^5)*(sqrt(2)/($pi^5/2))*(96-40*$pi+3*$pi^2)
#*/



orthog eqb0 ; const
orthog eqb1 ; const
orthog eqb2 ; const
orthog eqb3 ; const
orthog eqb4 ; const
orthog eqb5 ; const
orthog eqb6 ; const
orthog eqb7 ; const
orthog eqb8 ; const
orthog eqb9 ; const
orthog eqb10 ; const
orthog eqb11 ; const
orthog eqb12 ; const
orthog eqb13 ; const
orthog eqb14 ; const
orthog eqb15 ; const
orthog eqb16 ; const
orthog eqb17 ; const
orthog eqb18 ; const

/*
orthog eqb19 ; const
orthog eqb20 ; const
orthog eqb21 ; const
*/
orthog eq2 ; const
orthog eq3 ; const
orthog eq4 ; const
orthog eq5 ; const
 
weights W
params    bcoef qv  qw  qu
param_names allcoefnames   
end gmm --verbose  --iterate

matrix gmm_joitn_vcv = $vcv

################ inference ###############
series resid = depvar - lincomb(Xlist, bcoef)
scalar sv = qv
scalar sw = qw
scalar su = qu
series a1 = sv^2/(2*su^2) + resid/su
series b1 = -resid/sv - sv/su
series a2 = sv^2/(2*sw^2) - resid/sw 
series b2 = resid/sv - sv/sw

series loglExp = -ln(sw + su) + ln(exp(a1)*cnorm(b1) + exp(a2)*cnorm(b2))

#cdf of 2TSF error and Hansen-Doornik specification test 
series cdf2TSF = cnorm(resid/sv) + (su/(sw+su))*exp(a1)*cnorm(b1) - (sw/(sw+su))*exp(a2)*cnorm(b2)
series HDstat = invcdf(N,cdf2TSF)
matrix Spectest2TSF = normtest(HDstat,all)


########   Metrics     #########
series chi1 = cnorm(b2) + exp(a1-a2)*cnorm(b1)
series chi2 = exp(a2-a1)*chi1
scalar lambda = 1/sw + 1/su

####  Metrics when depvar is in levels ###
series Ew = 1/lambda + sv*(dnorm(b2) +b2*cnorm(b2)) / chi1
series Eu = 1/lambda + sv*(dnorm(b1) +b1*cnorm(b1)) / chi2

series M5_lev = Ew/ (depvar - Ew + Eu)
series M6_lev = Eu/ (depvar - Ew + Eu)
series M7_lev = M5_lev - M6_lev
  







 



#conditional measures when the dep var is in logs  ########
series Exp_w_pos = (lambda/(lambda-1))*(1/chi2)*(cnorm(b1)+exp(0.5*((b2 + sv)^2 - b1^2))*cnorm(b2+sv))
series Exp_w_neg = (lambda/(1+lambda))*(1/chi2)*(cnorm(b1)+exp(a2 - a1 - b2*sv + 0.5*(sv^2))*cnorm(b2-sv))
series Exp_u_pos = (lambda/(lambda-1))*(1/chi1)*(cnorm(b2)+exp(0.5*((b1 + sv)^2 - b2^2))*cnorm(b1+sv))
series Exp_u_neg = (lambda/(1+lambda))*(1/chi1)*(cnorm(b2)+exp(a1 - a2 - b1*sv + 0.5*(sv^2))*cnorm(b1-sv))
series ExpDens2tsf = (1/(sw+su))* (exp(a1)*cnorm(b1) + exp(a2)*cnorm(b2))
series Exp_wu = (exp( (1+su)*(a1+sv^2/(2*su)))*cnorm(b1-sv) + exp( (1-sw)*(a2-sv^2/(2*sw)))*cnorm(b2+sv)) / ((sw+su)*ExpDens2tsf)
series Exp_uw = (exp( (1-su)*(a1-sv^2/(2*su)))*cnorm(b1+sv) + exp( (1+sw)*(a2+sv^2/(2*sw)))*cnorm(b2-sv)) / ((sw+su)*ExpDens2tsf)

series M1 = 1-Exp_w_neg  #Relative contribution in Y of positive force w
series M2 = Exp_u_pos - 1 #Relative loss in Y due to negative force u
series M3 = Exp_wu    #Relative strength of w compared to u
series M4 = Exp_w_pos - Exp_u_neg #Volatility of Y_B due to w, u
series M5 = Exp_w_pos - 1  #Counterfactual markup effect of w on Y_B. Equal to M9
series M6 = 1- Exp_u_neg #Counterfactual markdown effect of u on Y_B. Equal to M8
series M7 = Exp_wu - 1 #Net effect on balanced outcome Y_B
#M8 and M9 are identical to previous ones in the log-depvar case
series M10 = 1- Exp_uw  #Gain as a percentage of Y-actual
