######################### 2TSF Binary Choice WITH COÎœPOSITE ERROR cdf - ExtraMarital Data 601 (PT)##############################
    

scalar SMALL = 1.0e-12
scalar BIG =  10

set max_verbose full
set hc_version 3
set bfgs_richardson on 

series depvar = ExMarBin
list RegrList = RegrListPT_noconst
string varblnames = varname(RegrList)       
string errnames = ",sw,su"   
string allcoefnames = varblnames ~ errnames  


ols   depvar RegrList  --quiet      
matrix gammaVec = $coeff 
scalar sw = .5 #relative stdev of positive one-sided  
scalar su = .5 #relative stdev of negative one-sided  

 
##### mle command ######
catch mle logl = check ? likely : NA
series xb = lincomb(RegrList,gammaVec)
scalar sv = sqrt(1 - sw^2 - su^2)
scalar c1 = su/(sw + su)
scalar c2 = sw/(sw + su)
series a1 = sv^2/(2*su^2) -  xb/su
series a2 = sv^2/(2*sw^2) +  xb/sw
series B1 = cnorm(xb - sv/su)
series B2 = cnorm(-xb - sv/sw)
series PMFbase = 1- cnorm(-xb/sv) - c1*exp(a1)*B1 + c2*exp(a2)*B2
series likely = depvar*log(PMFbase) + (1-depvar)*log(1-PMFbase)
scalar check = (sw>0)  && (su>0) && (sw<1)  && (su<1) && (sw^2 + su^2 <1)
params gammaVec  sw su
param_names allcoefnames   
end mle  --verbose  --robust

### Predicting P=1
matrix gammaVec = $coeff[1:1,8:8]
series xb = lincomb(RegrList,gammaVec)
scalar sv = sqrt(1 - sw^2 - su^2)
scalar c1 = su/(sw + su)
scalar c2 = sw/(sw + su)
series a1 = sv^2/(2*su^2) -  xb/su
series a2 = sv^2/(2*sw^2) +  xb/sw
series B1 = cnorm(xb - sv/su)
series B2 = cnorm(-xb - sv/sw)
series ProbS_one = (1- cnorm(-xb/sv) - c1*exp(a1)*B1 + c2*exp(a2)*B2)
series ProbPredS_one = (ProbS_one>0.5)



#### COMPUTE MARGINAL EFFECTS OF REGRESSORS ####
matrix Regrs_m =  {RegrListPT_noconst}
matrix Regr_means = meanc(Regrs_m)
scalar xb_means = sum(Regr_means*gammaVec)
scalar a1_means = sv^2/(2*su^2) +  (-xb_means)/su 
scalar a2_means = sv^2/(2*sw^2) -  (-xb_means)/sw  
scalar b1_means = - (-xb_means)/sv - sv/su
scalar b2_means = -xb_means/sv - sv/sw
scalar dens_means = (sw+su)^{-1} * (exp(a1_means)*cnorm(b1_means) + exp(a2_means)*cnorm(b2_means))

matrix Marg_At_mean = dens_means*gammaVec

#### COMPUTE Marginal Effects of sigma_w and sigma_u at the regressor means ####
scalar a1_sw = -sw/su^2
scalar b1_sw = sw/(su*sv) - (sw/sv^3)*(-xb_means)
scalar a2_sw = (-xb_means)/sw^2 - (1-su^2)/sw^3 
scalar b2_sw = (sw/sv^3)*(-xb_means) - 1/sv + sv/sw^2

scalar Prob_1_sw = -(sw+su)^{-1}* ( su*exp(a1_means)* (cnorm(b1_means)*a1_sw + dnorm(b1_means)* b1_sw) \
  - sw*exp(a2_means)* (cnorm(b2_means)*a2_sw + dnorm(b2_means)*b2_sw) - su* dens_means )
  

scalar a1_su = (-xb_means)/su^2 - (1-sw^2)/su^3                
scalar b1_su = 1/sv + sv/su^2 -(su/sv^3)*(-xb_means)             
scalar a2_su = -su/sw^2
scalar b2_su = su/(sw*sv) + (su/sv^3)*(-xb_means)
scalar Prob_1_su = -(sw+su)^{-1}* ( su*exp(a1_means)* (cnorm(b1_means)*a1_su + dnorm(b1_means)* b1_su) \
  - sw*exp(a2_means)* (cnorm(b2_means)*a2_su + dnorm(b2_means)*b2_su) + sw* dens_means )
  

#### Compute average probability ####
scalar Prob_1_means = 1- cnorm(-xb_means/sv) - c1*exp(a1_means)*cnorm(b1_means) + c2*exp(a2_means)*cnorm(b2_means)

probit depvar RegrListPT
matrix probitcoef = $coeff
series xb_probit = lincomb(RegrListPT,probitcoef)
series Prob_1_probit_S = cnorm(xb_probit)

##
